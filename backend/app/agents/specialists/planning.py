"""
Planning Agent - Creates development plans from user requirements.

This agent decomposes user requests into actionable development tasks
and creates a dependency graph for execution.
"""

from typing import Dict, Any, List
import logging
from datetime import datetime

from ..base import BaseAgent, AgentResult
from ..state import DevMasterState, Message
from ..registry import register_agent


@register_agent("PlanningAgent")
class PlanningAgent(BaseAgent):
    """
    Planning Agent
    
    Responsible for:
    - Analyzing user requirements
    - Creating a development plan
    - Defining the dependency graph
    - Setting up the execution sequence
    """
    
    def __init__(self, name: str = "PlanningAgent", **kwargs):
        super().__init__(
            name=name,
            description="Creates development plans from user requirements"
        )
        self.logger = logging.getLogger(f"agent.{name}")
    
    async def execute(self, state: DevMasterState) -> AgentResult:
        """
        Create a development plan based on the user request.
        
        For now, this creates a simple hardcoded plan.
        In production, this would use an LLM to analyze requirements.
        """
        user_request = state.get("user_request", "")
        
        # Create a simple plan (in production, this would be LLM-generated)
        plan = self._create_sample_plan(user_request)
        
        # Create planning message
        message = self.add_message(
            f"Created development plan with {len(plan['steps'])} steps. "
            f"Starting with data modeling."
        )
        
        return AgentResult(
            success=True,
            state_updates={
                "plan": plan,
                "status": "executing"
            },
            next_agent="DataModelingAgent",
            messages=[message]
        )
    
    def _create_sample_plan(self, request: str) -> Dict[str, Any]:
        """
        Create a sample development plan.
        
        In production, this would be generated by an LLM based on
        the specific requirements in the request.
        """
        return {
            "project_type": "fullstack_web_application",
            "requirements": {
                "description": request,
                "parsed_at": datetime.utcnow().isoformat()
            },
            "steps": [
                {
                    "id": "1",
                    "name": "Data Modeling",
                    "description": "Define database schema and models",
                    "agent": "DataModelingAgent",
                    "dependencies": []
                },
                {
                    "id": "2", 
                    "name": "Backend Logic",
                    "description": "Implement business logic and services",
                    "agent": "BackendLogicAgent",
                    "dependencies": ["1"]
                },
                {
                    "id": "3",
                    "name": "API Generation",
                    "description": "Generate FastAPI routes",
                    "agent": "APIGenerationAgent",
                    "dependencies": ["2"]
                },
                {
                    "id": "4",
                    "name": "SDK Generation",
                    "description": "Generate TypeScript SDK",
                    "agent": "SDKGenerationAgent",
                    "dependencies": ["3"]
                },
                {
                    "id": "5",
                    "name": "Frontend Development",
                    "description": "Build React UI components",
                    "agent": "FrontendAgent",
                    "dependencies": ["4"]
                },
                {
                    "id": "6",
                    "name": "Integration Testing",
                    "description": "Test the complete stack",
                    "agent": "IntegrationAgent",
                    "dependencies": ["5"]
                }
            ],
            "estimated_duration": "15 minutes",
            "technology_stack": {
                "backend": "FastAPI",
                "frontend": "React + TypeScript",
                "database": "PostgreSQL",
                "styling": "Tailwind CSS"
            }
        }
    
    async def validate_preconditions(self, state: DevMasterState) -> bool:
        """Ensure we have a user request and task type."""
        return bool(
            state.get("user_request") and 
            state.get("task_type") == "FULLSTACK_DEVELOPMENT"
        )
