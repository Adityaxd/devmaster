"""
Tests for Python-to-SQL Generator
Tests the conversion of SQLAlchemy models to PostgreSQL DDL
"""

import pytest
from sqlalchemy import Column, String, Integer, Boolean, DateTime, ForeignKey, Text
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid

from app.generators.python_to_sql import PythonToSQLGenerator

# Create a base for test models
TestBase = declarative_base()


class TestSimpleModel(TestBase):
    """Simple model for testing basic column types."""
    __tablename__ = "test_simple"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    description = Column(Text)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, server_default=func.now())


class TestUUIDModel(TestBase):
    """Model with UUID primary key."""
    __tablename__ = "test_uuid"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    code = Column(String(50), unique=True, nullable=False, index=True)


class TestRelationshipParent(TestBase):
    """Parent model for testing relationships."""
    __tablename__ = "test_parent"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100))


class TestRelationshipChild(TestBase):
    """Child model for testing foreign keys."""
    __tablename__ = "test_child"
    
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey("test_parent.id", ondelete="CASCADE"))
    data = Column(String(255))


class TestPythonToSQLGenerator:
    """Test suite for PythonToSQLGenerator."""
    
    def setup_method(self):
        """Set up test fixtures."""
        self.generator = PythonToSQLGenerator()
    
    def test_simple_model_generation(self):
        """Test generation of a simple model with basic column types."""
        sql = self.generator.generate(TestSimpleModel)
        
        # Verify CREATE TABLE statement
        assert "CREATE TABLE test_simple" in sql
        
        # Verify columns
        assert "id INTEGER PRIMARY KEY" in sql
        assert "name VARCHAR(100) NOT NULL" in sql
        assert "description TEXT" in sql
        assert "is_active BOOLEAN DEFAULT FALSE" in sql or "is_active BOOLEAN DEFAULT TRUE" in sql
        assert "created_at TIMESTAMP" in sql
        assert "DEFAULT CURRENT_TIMESTAMP" in sql
    
    def test_uuid_model_generation(self):
        """Test generation of a model with UUID primary key."""
        sql = self.generator.generate(TestUUIDModel)
        
        # Verify UUID column
        assert "CREATE TABLE test_uuid" in sql
        assert "id UUID PRIMARY KEY" in sql
        assert "DEFAULT gen_random_uuid()" in sql
        
        # Verify unique constraint and index
        assert "code VARCHAR(50) NOT NULL UNIQUE" in sql
        assert "CREATE INDEX ix_test_uuid_code ON test_uuid (code)" in sql
    
    def test_foreign_key_generation(self):
        """Test generation of foreign key constraints."""
        # Generate parent first
        parent_sql = self.generator.generate(TestRelationshipParent)
        assert "CREATE TABLE test_parent" in parent_sql
        
        # Generate child
        child_sql = self.generator.generate(TestRelationshipChild)
        assert "CREATE TABLE test_child" in child_sql
        assert "parent_id INTEGER" in child_sql
        
        # Check for foreign key constraint
        assert "ALTER TABLE test_child ADD CONSTRAINT" in child_sql
        assert "FOREIGN KEY (parent_id) REFERENCES test_parent(id)" in child_sql
        assert "ON DELETE CASCADE" in child_sql
    
    def test_multiple_models_with_dependencies(self):
        """Test generation of multiple models with proper dependency ordering."""
        models = [TestRelationshipChild, TestRelationshipParent]  # Wrong order
        
        sql = self.generator.generate_multiple(models)
        
        # Verify header
        assert "-- Generated by DevMaster Python-to-SQL Generator" in sql
        assert "-- PostgreSQL DDL Script" in sql
        
        # Verify parent is created before child
        parent_pos = sql.find("CREATE TABLE test_parent")
        child_pos = sql.find("CREATE TABLE test_child")
        assert parent_pos < child_pos, "Parent table should be created before child"
    
    def test_column_type_mapping(self):
        """Test mapping of various SQLAlchemy types to PostgreSQL."""
        from sqlalchemy import Float, Date, Time, BigInteger, SmallInteger
        from sqlalchemy.dialects.postgresql import JSONB, ARRAY, INET
        
        class TestTypes(TestBase):
            __tablename__ = "test_types"
            
            id = Column(Integer, primary_key=True)
            float_col = Column(Float)
            date_col = Column(Date)
            time_col = Column(Time)
            big_int_col = Column(BigInteger)
            small_int_col = Column(SmallInteger)
            json_col = Column(JSONB)
            array_col = Column(ARRAY(String))
            ip_col = Column(INET)
        
        sql = self.generator.generate(TestTypes)
        
        assert "float_col REAL" in sql
        assert "date_col DATE" in sql
        assert "time_col TIME" in sql
        assert "big_int_col BIGINT" in sql
        assert "small_int_col SMALLINT" in sql
        assert "json_col JSONB" in sql
        assert "array_col VARCHAR[]" in sql
        assert "ip_col INET" in sql
    
    def test_index_generation(self):
        """Test generation of indexes."""
        class TestIndexes(TestBase):
            __tablename__ = "test_indexes"
            
            id = Column(Integer, primary_key=True)
            email = Column(String(255), unique=True, index=True)
            username = Column(String(100), index=True)
            status = Column(String(50), index=True)
        
        sql = self.generator.generate(TestIndexes)
        
        # Primary key should not generate separate index
        assert "CREATE INDEX ix_test_indexes_id" not in sql
        
        # Other indexed columns should generate indexes
        assert "CREATE INDEX ix_test_indexes_email ON test_indexes (email)" in sql
        assert "CREATE INDEX ix_test_indexes_username ON test_indexes (username)" in sql
        assert "CREATE INDEX ix_test_indexes_status ON test_indexes (status)" in sql
    
    def test_real_world_models(self):
        """Test with actual DevMaster models."""
        from app.models.user import User
        from app.models.project import Project
        
        # Generate SQL for User model
        user_sql = self.generator.generate(User)
        
        assert "CREATE TABLE users" in user_sql
        assert "id UUID PRIMARY KEY" in user_sql
        assert "email VARCHAR(255) NOT NULL UNIQUE" in user_sql
        assert "username VARCHAR(100) NOT NULL UNIQUE" in user_sql
        assert "hashed_password VARCHAR(255) NOT NULL" in user_sql
        assert "is_active BOOLEAN NOT NULL DEFAULT TRUE" in user_sql
        assert "created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP" in user_sql
        
        # Generate SQL for Project model
        project_sql = self.generator.generate(Project)
        
        assert "CREATE TABLE projects" in project_sql
        assert "owner_id UUID NOT NULL" in project_sql
        assert "FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE" in project_sql
        # JSON columns are correctly typed even without explicit default in DDL
        assert "technology_stack JSON" in project_sql
        assert "settings JSON" in project_sql
        assert "file_structure JSON" in project_sql
    
    def test_error_handling(self):
        """Test error handling for invalid models."""
        class InvalidModel:
            """Not a SQLAlchemy model."""
            pass
        
        with pytest.raises(Exception):
            self.generator.generate(InvalidModel)
    
    def test_default_values(self):
        """Test handling of various default value types."""
        class TestDefaults(TestBase):
            __tablename__ = "test_defaults"
            
            id = Column(Integer, primary_key=True)
            string_default = Column(String, default="hello")
            int_default = Column(Integer, default=42)
            bool_default = Column(Boolean, default=False)
            null_default = Column(String, default=None)
        
        sql = self.generator.generate(TestDefaults)
        
        assert "string_default VARCHAR DEFAULT 'hello'" in sql
        assert "int_default INTEGER DEFAULT 42" in sql
        assert "bool_default BOOLEAN DEFAULT FALSE" in sql
        # NULL default might be omitted as it's implicit
